General
* Improve readme file.
* Improve api documentation and check against go doc.

Router
* Decide on how named routes should be handled when another route is added with the same name, this also includes
refreshing of named route list. Should it panic, overwrite(update) route, return an error string? Should it still be added
to all routes/trie?
* Possible abstract trie to separate interfaces, RouteAdder - RouteSearcher - RouteAdderSearcher?
* Add has method for collection to check if route exists, will also need a compare method on route so that slices in
routes can be checked for equality. See https://play.golang.org/p/J48Jz51C73 and https://play.golang.org/p/mzvvoksjDq
* Decide what to do about nil route handlers.
* Add static file routing.
* Add method not allowed when routes are found but methods don't match (http.Error(rw, "Method Not Allowed", 405)).
    	// TODO: add css, js, img etc
    	if url == "/favicon.ico" || url == "/robots.txt" {
    		//file := config.PublicPath + url
    		//http.ServeFile(response, request, file)
    		return
    	}
* Add controllers.
* Add helper methods:
    // Map a handler to the given method and uri pattern
    func (router *router) Map(method RequestMethod, pattern string, handler interface{}) {
    	if pattern[0] != '/' {
    		panic("Path must start with a '/'.")
    	}

    	route := &Route{method, pattern, handler}

    	router.routes.addNode(method, pattern, route)
    }

    // Get is a convenient wrapper around map for get requests
    func (router *router) Get(pattern string, handler RouteClosure) {
    	router.Map(GET, pattern, handler)
    }

    // Post is a convenient wrapper around map for post requests
    func (router *router) Post(pattern string, handler RouteClosure) {
    	router.Map(POST, pattern, handler)
    }

    // Put is a convenient wrapper around map for put requests
    func (router *router) Put(pattern string, handler RouteClosure) {
    	router.Map(PUT, pattern, handler)
    }

    // Delete is a convenient wrapper around map for delete requests
    func (router *router) Delete(pattern string, handler RouteClosure) {
    	router.Map(DELETE, pattern, handler)
    }